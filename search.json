[{"title":"弹性盒子","url":"/2021/07/11/CSS2/","content":"<p>当我们将盒子改为弹性盒子时，换句话说就是使用flex布局时，里面的盒子就会发生一些变化</p>\n<ol>\n<li>块级元素<br>块级元素变成弹性盒子后,宽度由父级百分比变为由内容撑开,高度不设置时,默认拉伸铺满父容器的高度.</li>\n<li>行内元素<br>行内元素变成弹性盒子后,可直接设置宽高,内容由内容撑开,高度不设置时,默认拉伸铺满父容器的高度.</li>\n</ol>\n","categories":["前端前期"],"tags":["CSS移动端","弹性盒子"]},{"title":"移动端布局单位","url":"/2021/07/07/Css1/","content":"<p>1.简单说明<br>定义是直接从网站上C下来的。<br>px: 表示固定的像素单位<br>em: 相对单位, 相对于当前容器的字体大小而定,常用于首行缩进2个字符等<br>rem: 相对单位, 相对于当前根标签html的字体大小,1rem &#x3D; 1html的字体大小<br>vW: 相对单位, 1vw等于视口宽度的百分之一<br>vH: 相对单位, 1vh等于视口高度的百分之一<br>我在自己学习的移动端网页中，常用到的就是rem和vw,这两个单位是相对单位，即可以通过视口的宽度大小变化随时更改自身的大小。<br>其中，rem单位的使用是要伴随着媒体查询来使用的<br>例如：<br>@media (min-width:375){<br>html{<br>font-size:37.5px<br>}<br>}</p>\n<p>案例中使用的宽度是iphone6&#x2F;7&#x2F;8的宽度，375px。<br>我们通过更改html的字体大小来使rem进行变化，在html字体增大时rem大小也随之增大，页面也就会产生自适应效果。然而这有需要进行大量的计算公式是(视口的宽度.&#x2F;html字体的大小)，在VScode中有一款插件(<a href=\"https://img2022.cnblogs.com/blog/2882921/202206/2882921-20220607113853855-1497321648.png\">https://img2022.cnblogs.com/blog/2882921/202206/2882921-20220607113853855-1497321648.png</a>)<br>这是我的截图，他的下载网址是<br><a href=\"https://www.cnblogs.com/aicaidedengzi/articles/dengziwenxue.html\">https://marketplace.visualstudio.com/items?itemName=cipchk.cssrem</a><br>在插件中点击设置图标，再选中其中的管理扩展设置就可以打开它的设置界面，找到Root Font Size这个选项栏，将下面的值更改为你的HTML相同的font-size属性值就可以使用了，使用方法就是在你打出font-size为(…px)时会自动弹出相应的rem值，但这个值只与你在扩展设置的html值有关,可以直接调用。<br>而vw与vh则是分别将视口的宽度和高度平均分成100份，类似百分比布局，但是如果使用vh布局就会有很多问题，例如会导致盒子模型的高度发生变化，极容易产生bug使页面布局受到很大的影响。<br>em在我使用过程中所用较少，所以暂且不提。</p>\n","categories":["前端前期"],"tags":["CSS移动端"]},{"title":"认识JavaScript","url":"/2021/07/11/JavascriptA/","content":"<h1 id=\"一-认识JavaScript\"><a href=\"#一-认识JavaScript\" class=\"headerlink\" title=\"一.认识JavaScript\"></a>一.认识JavaScript</h1><p>js书写的三种形式<br>在编写js代码之前，首先要认识到js代码在编写的页面中的作用，之前我编写的页面为静态页面，只能是通过HTML 和 CSS 代码实现一些静态功能和一些很简单的动态功能，比如使用hover添加给盒子让其有一些动画效果，但当我做电商网站时，想通过hover来实现一些商品展示效果的时候发现了我无法百分之百的还原原网页的选择效果，所以，JS才显得尤为重要。</p>\n<h1 id=\"二-变量\"><a href=\"#二-变量\" class=\"headerlink\" title=\"二.变量\"></a>二.变量</h1><p>1.变量的命名<br>js通过定义变量来存储相应的字面量，实现对其值的更改，我学习了var变量和变量的命名，命名可以使用(a ~ z),(A ~ Z),(0 ~ 9)还有特殊符号(_和$)。<br>命名不可以使用数字开头，并且命名时应采用驼峰命名法，例如(myName)<br>2.变量的使用<br>要先声明一个变量 再对变量进行赋值操作</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">`var a = &#x27;我是凳子&#x27;`</span><br></pre></td></tr></table></figure>\n\n\n\n<p>3.输出语句 我目前学习了三种输出方法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">`prompt(&#x27;&#x27;)//提供一个输入框</span><br><span class=\"line\"> alert(&#x27;&#x27;)//弹出一个警告框</span><br><span class=\"line\"> console.log(&#x27;&#x27;)//在打印框输出结果`</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>其中最为常用的是console.log这种输出方式，我通过网上参考别人的网站搭建发现alert和prompt这两种方式很少有被使用。</p>\n<p>3.变量的数据类型</p>\n<p><strong>这个是重点</strong><br>js的数据类型一种有七种 可以按照相关度分为三组，<br>第一组为<br>Number 数字类型<br>Boolean 布尔类型<br>String 字符串类型<br>第二组为<br>undefined 未定值变量的字面量<br>null 空值变量<br>第三组为<br>BigInt 任意大的整数<br>Symbol 符号类型</p>\n<h1 id=\"三简单案例\"><a href=\"#三简单案例\" class=\"headerlink\" title=\"三简单案例\"></a>三简单案例</h1><p>学以致用<br>1.首先先做一个简单地交换案例，需求为交换字面量</p>\n<figure class=\"highlight plaintext\"><figcaption><span>banana </span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">var banana = &#x27;我是一个香蕉&#x27;;</span><br><span class=\"line\">var apple = &#x27;我是一个苹果&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">var temp//放置字面量的盒子;</span><br><span class=\"line\"></span><br><span class=\"line\">temp = banana;//将banana的字面量赋给放置盒子</span><br><span class=\"line\"></span><br><span class=\"line\">banana = apple ;//将apple的字面量赋值给banana</span><br><span class=\"line\">apple = temp; //将放置盒子中的字面量赋值给apple 完成交换</span><br></pre></td></tr></table></figure>\n\n<p>通过这个简单案例，让我掌握了些变量的意义，明白了变量之间的交换关系，和赋值方法。 2.在数字型变量的学习中，我学科一个简单地判断是否为数字的方法 isNaN() 需求：判断’12’,12,’12px’是否为数字</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">console.log(isNaN(12))//flase</span><br><span class=\"line\">console.log(isNaN(&#x27;12px&#x27;))</span><br><span class=\"line\">//true</span><br></pre></td></tr></table></figure>\n\n<p>isNaN的含义是not a number 判断是否不是数字，这个非常绕口，输出为true的时候就代表它不是一个数字，而输出为false的时候就是它是一个数字，这里有个问题，就是12和’12’,后者在直观的时候是一个字符串，应该输出为true，但结果却是判断它是一个数字，查阅了CSDN上面的一篇文章</p>\n<p><a href=\"(https://blog.csdn.net/weixin_39093202/article/details/84644674?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165469250416782350940986%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=165469250416782350940986&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-84644674-null-null.142%5Ev11%5Epc_search_result_control_group,157%5Ev13%5Econtrol&utm_term=isNaN&spm=1018.2226.3001.4187\" title=\"isNaN\">CSDN</a> )</p>\n<p>上面代码之所以返回false，原因是这些数组能被Number函数转成数值。</p>\n<p>变量之间也是可以拼接的，通过使用”+”实现拼接的目的，也可以使用”<code>$&#123;&#125;</code>“来对变量进行拼接，</p>\n<p>案例三，出一个输入框（prompt),让用户输入年龄（用户输入)把用户输入的值用变量保存起来,把刚才输入的年龄与所要输出的字符串拼接 （程序内部处理使用alert语句弹出警示框（输出结果）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">var age = prompt(&#x27;你今年多少岁了&#x27;)</span><br><span class=\"line\">     alert(&#x27;我掐指一算你今年&#x27;+age+&#x27;岁了&#x27;)</span><br><span class=\"line\">    //  在使用``这个符号是才可以使用$&#123;&#125;来替代+号</span><br><span class=\"line\">     alert(`我掐指一算你今年$&#123;age&#125;岁了`)</span><br><span class=\"line\"></span><br><span class=\"line\">     var str2 = `我今年$&#123;age&#125;岁了`</span><br><span class=\"line\">     console.log(str2)</span><br></pre></td></tr></table></figure>\n\n<p>学习布尔类型的转换</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">var demo;</span><br><span class=\"line\">console.log(demo);</span><br><span class=\"line\">console.log(demo + 1);</span><br><span class=\"line\">console.log(demo + &quot;hello&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">var space = null;</span><br><span class=\"line\">console.log(space);</span><br><span class=\"line\">console.log(space + &quot;hello&quot;);</span><br><span class=\"line\">console.log(space + 1);</span><br><span class=\"line\"></span><br><span class=\"line\">var bool1 = true;</span><br><span class=\"line\">var bool2 = false;</span><br><span class=\"line\">console.log(bool1 + 1);</span><br><span class=\"line\">console.log(bool1 + &quot;hello&quot;);</span><br><span class=\"line\">console.log(bool2 + 1);</span><br><span class=\"line\">console.log(bool2 + &quot;hello&quot;);</span><br><span class=\"line\">console.log(bool1 + bool2);</span><br><span class=\"line\"></span><br><span class=\"line\">// 1. 布尔类型 只有两个值， true 和 false 表示真或者假</span><br><span class=\"line\">var flag = true;</span><br><span class=\"line\">var flag1 = false;</span><br><span class=\"line\"></span><br><span class=\"line\">// 2. Boolean 参与运算  true 当作1 ， false 当作0</span><br><span class=\"line\">console.log(true + 1); // 2</span><br><span class=\"line\">console.log(false + 1); // 1</span><br><span class=\"line\">console.log(true + &quot;1&quot;); // true1</span><br><span class=\"line\">console.log(true + false); // 1+0 = 1</span><br><span class=\"line\"></span><br><span class=\"line\">//  undefined 未定义</span><br><span class=\"line\">var demo; // 声明变量未赋值</span><br><span class=\"line\">console.log(demo);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(undefined + &quot;pink&quot;); // &#x27;undefinedpink&#x27;</span><br><span class=\"line\">// undefined 和数字相加 得到 NaN  / not a number</span><br><span class=\"line\">console.log(undefined + 1); // NaN</span><br><span class=\"line\"></span><br><span class=\"line\">// null 空值</span><br><span class=\"line\">console.log(null + &quot;pink&quot;); // nullpink</span><br><span class=\"line\">console.log(null + 1); // 1</span><br></pre></td></tr></table></figure>\n\n","categories":["前端前期"],"tags":["Javascript初学"]},{"title":"++i和i++","url":"/2021/07/12/JavascriptB/","content":"<p>++i 和 i++的运算结果是一样的，但是过程却有天差地别<br>++i 是在自身加一之后，再参加运算，可以理解为先加在运算，<br>i++ 是在运算之后，再自身加一，可以理解为，先参加运算，再自身加一，</p>\n","categories":["前端前期"],"tags":["Javascript初学","Js小案例"]},{"title":"使用js制作ATM机","url":"/2021/07/12/JavascriptC/","content":"<p>整体思路为，运用while循环的无限循环属性，来无限弹出功能窗口，运用if的条件判断语句调用窗口中的功能。<br>注意点为，对于需要重复调用的参数，注意赋值和初始化处理，还有注意判断语句的逻辑顺序<br>代码为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">      // 首先定义钱的参数</span><br><span class=\"line\">      var money = 0;</span><br><span class=\"line\">      // while 为true时自动执行</span><br><span class=\"line\">      while (true) &#123;</span><br><span class=\"line\">        // 使用a作为判断选项依据</span><br><span class=\"line\">        var a = prompt(</span><br><span class=\"line\">          &quot;请输入你要的操作:\\n 1.存钱\\n 2.取钱\\n 3.显示余额\\n 4退出&quot;</span><br><span class=\"line\">        );</span><br><span class=\"line\">        parseInt(a);</span><br><span class=\"line\">        if (a == 1) &#123;</span><br><span class=\"line\">          // 数据初始化，清除之前的数据</span><br><span class=\"line\">          inp = 0;</span><br><span class=\"line\">          var inp = prompt(&quot;请输入存款数量&quot;);</span><br><span class=\"line\">          money += parseInt(inp);</span><br><span class=\"line\">          // 余额不足判断</span><br><span class=\"line\">          if(money &lt; 0)&#123;</span><br><span class=\"line\">            alert(&#x27;你的余额不足&#x27;)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;else if (a == 2) &#123;</span><br><span class=\"line\">          // 数据初始化，清除之前的数据</span><br><span class=\"line\">          out = 0;</span><br><span class=\"line\">          var out = prompt(&quot;请输入取款数量&quot;);</span><br><span class=\"line\">          money -= parseInt(out);</span><br><span class=\"line\">          // 余额不足判断</span><br><span class=\"line\">          if(money&lt;0)&#123;</span><br><span class=\"line\">            alert(&#x27;你的余额不足&#x27;)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else if (a == 3) &#123;</span><br><span class=\"line\">          alert(`你的余额为$&#123;money&#125;`);</span><br><span class=\"line\">          parseInt(money);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else if (a == 4) &#123;</span><br><span class=\"line\">          break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 如果不是正确选项，返回提示</span><br><span class=\"line\">        else if(a !== 1 &amp;&amp; a !==2 &amp;&amp; a!==3&amp;&amp; a!==4)&#123;</span><br><span class=\"line\">          alert(&#x27;请输入正确数值&#x27;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n","categories":["前端前期"],"tags":["Javascript初学","Js小案例"]},{"title":"使用JS制作简单的云计算器","url":"/2021/07/12/JavascriptD/","content":"<p>页面制作思路为，制作操作简单的alert输出框的操作主页面，在通过主页面制作每一部分的功能页面，在调用错误页面是给出错误提示。<br>逻辑思路，使用while或者do while来实现主页面的重复弹出功能，每一个功能(加减乘除)页面都需要调用一个函数,函数需要写在while循环之外，维尔市提高性能，在功能页面；使用时，调用相应函数的函数名，再手动输入实参，每次输入实参都使用一个输出弹出框，这样确保实参数量与形参相等。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">        // 加法函数</span><br><span class=\"line\">      function sum(num1, num2) &#123;</span><br><span class=\"line\">        return parseFloat(num1) + parseFloat(num2);</span><br><span class=\"line\">        // 减法函数</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      function sub(num1,num2) &#123;</span><br><span class=\"line\">          return parseFloat(num1) - parseFloat(num2)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    //   乘法函数</span><br><span class=\"line\">      function mul(num1,num2) &#123;</span><br><span class=\"line\">          return parseFloat(num1) * parseFloat(num2)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    //   除法函数</span><br><span class=\"line\">      function divi(num1,num2) &#123;</span><br><span class=\"line\">          return parseFloat(num1) / parseFloat(num2)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      while (true) &#123;</span><br><span class=\"line\">        //   主页面输出框</span><br><span class=\"line\">        var a = prompt(</span><br><span class=\"line\">          &quot;欢迎使用云计算器\\n 1.加法运算\\n 2.减法运算\\n 3.乘法运算\\n 4.除法运算\\n 5.退出\\n请输入你的选项&quot;</span><br><span class=\"line\">        );</span><br><span class=\"line\">        // 通过a的字面量控制计算器的功能页面弹出</span><br><span class=\"line\">        if (a == 1) &#123;</span><br><span class=\"line\">            // 手动输入实参的字面量</span><br><span class=\"line\">            var addNum1 = prompt(&#x27;请输入第一个数据&#x27;)</span><br><span class=\"line\">            var addNum2 = prompt(&#x27;请输入第二个数据&#x27;)</span><br><span class=\"line\">            // 调用函数</span><br><span class=\"line\">            var res = sum(addNum1,addNum2)</span><br><span class=\"line\">            // 输出结果</span><br><span class=\"line\">            alert(`你计算出的结果为$&#123;res&#125;`)</span><br><span class=\"line\">        &#125; else if (a == 2) &#123;</span><br><span class=\"line\">            // 手动输入实参的字面量</span><br><span class=\"line\">            var subNum1 = prompt(&#x27;请输入第一个数据&#x27;)</span><br><span class=\"line\">            var subNum2 = prompt(&#x27;请输入第二个数据&#x27;)</span><br><span class=\"line\">            // 调用函数</span><br><span class=\"line\">            var res = sub(subNum1,subNum2)</span><br><span class=\"line\">            // 输出结果</span><br><span class=\"line\">            alert(`你计算出的结果为$&#123;res&#125;`)</span><br><span class=\"line\">        &#125; else if (a == 3) &#123;</span><br><span class=\"line\">            // 手动输入实参的字面量</span><br><span class=\"line\">            var mulNum1 = prompt(&#x27;请输入第一个数据&#x27;)</span><br><span class=\"line\">            var mulNum2 = prompt(&#x27;请输入第二个数据&#x27;)</span><br><span class=\"line\">            // 调用函数</span><br><span class=\"line\">            var res = mul(mulNum1,mulNum2)</span><br><span class=\"line\">            // 输出结果</span><br><span class=\"line\">            alert(`你计算出的结果为$&#123;res&#125;`)</span><br><span class=\"line\">        &#125; else if (a == 4) &#123;</span><br><span class=\"line\">            // 手动输入实参的字面量</span><br><span class=\"line\">            var diviNum1 = prompt(&#x27;请输入第一个数据&#x27;)</span><br><span class=\"line\">            var diviNum2 = prompt(&#x27;请输入第二个数据&#x27;)</span><br><span class=\"line\">            // 调用函数</span><br><span class=\"line\">            var res = divi(diviNum1,diviNum2)</span><br><span class=\"line\">            // 输出结果</span><br><span class=\"line\">            alert(`你计算出的结果为$&#123;res&#125;`)</span><br><span class=\"line\">        &#125; else if (a == 5) &#123;</span><br><span class=\"line\">            // 终止循环</span><br><span class=\"line\">            break</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            // 输入错误功能的提示</span><br><span class=\"line\">            alert(&#x27;请输入有效数字&#x27;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n","categories":["前端前期"],"tags":["Javascript初学","Js小案例"]},{"title":"JS冒泡事件，实现数组大小排列","url":"/2021/07/12/JavascriptE/","content":"<p>独立思考是进步最好的办法<br>做冒泡事件之前，需要弄明白一件事情，一个打乱的数组该怎么样让它从大到小排列，或者从小到大排列，那必然需要让数组中的数据进行比较和交换位置<br>让数组内部相邻数据移动一次，需要一个判断，让数组内部一个数据多次移动，则需要一次循环，让数据内部多个数据移动，则需要一次外循环。<br>我们首先需要使用循环来使程序进行依次比较，而一个数组中的数据要到达你期望的位置需要 &lt;&#x3D; 一整轮的循环，这就说明你需要一层循环来使数组中的一个数据到达它的位置，但一个数组中会有未知的数据量，所以你还需通过使用外层循环来使内层循环运行与数组长度相同的次数，那结构也就明了了。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">外层循环&#123;</span><br><span class=\"line\">  内层循环&#123;</span><br><span class=\"line\">   条件判断(比较数组相邻数据的大小)&#123;</span><br><span class=\"line\">    代码位置交换  </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面来看代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">     // 定义数组</span><br><span class=\"line\">   var arr = [</span><br><span class=\"line\">     5,4,3,2,1</span><br><span class=\"line\">   ];</span><br><span class=\"line\"> //   temp为数据转换所需参数</span><br><span class=\"line\">   var temp = 0</span><br><span class=\"line\"> //   外层循环 控制数组中的所有数据到指定位置</span><br><span class=\"line\">   for(var j = 0; j&lt;arr.length; j++)&#123;</span><br><span class=\"line\">     //   内层循环 控制数组中的一个数据到指定位置</span><br><span class=\"line\">     //   注意的是，已经移动到指定位置的数据，不需要再参加循环</span><br><span class=\"line\">   for(var i = 0; i &lt; arr.length -1 -j; i++)&#123;</span><br><span class=\"line\">     //   判断数组中的相邻数据大小，并且移动一次</span><br><span class=\"line\">       if(arr[i] &gt; arr[i+1])&#123;</span><br><span class=\"line\">           temp = arr[i]</span><br><span class=\"line\">           arr[i] = arr[i+1]</span><br><span class=\"line\">           arr[i+1]=temp</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">   console.log(arr);</span><br><span class=\"line\"> &lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>对此可以做些改动，比如说对这段代码进行封装;为了方便使用，让用户可以输入任意长度的字符串</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">function fullPermutation(arr)&#123;</span><br><span class=\"line\">       //   temp为数据转换所需参数</span><br><span class=\"line\">         var temp = 0</span><br><span class=\"line\">       //   外层循环 控制数组中的所有数据到指定位置</span><br><span class=\"line\">         for(var j = 0; j&lt;arr.length; j++)&#123;</span><br><span class=\"line\">           //   内层循环 控制数组中的一个数据到指定位置</span><br><span class=\"line\">           //   注意的是，已经移动到指定位置的数据，不需要再参加循环</span><br><span class=\"line\">         for(var i = 0; i &lt;= arr.length -1 -j; i++)&#123;</span><br><span class=\"line\">           //   判断数组中的相邻数据大小，并且移动一次</span><br><span class=\"line\">             if(arr[i] &gt; arr[i+1])&#123;</span><br><span class=\"line\">                 temp = arr[i]</span><br><span class=\"line\">                 arr[i] = arr[i+1]</span><br><span class=\"line\">                 arr[i+1]=temp</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       return arr</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> //    var res =fullPermutation([1641,65,165,156,1,561,65,156,1,51,53,15,1,65,165,6,14])</span><br><span class=\"line\"> //    console.log(res);</span><br><span class=\"line\"></span><br><span class=\"line\">    var str = []</span><br><span class=\"line\">    while(true)&#123;</span><br><span class=\"line\">        var a = prompt(&#x27;请输入数组长度&#x27;);</span><br><span class=\"line\">        for(var i =0; i&lt;a; i++)&#123;</span><br><span class=\"line\">            var b = prompt(`请输入第$&#123;i+1&#125;个数据`)</span><br><span class=\"line\">            str[i] = b</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        break</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fullPermutation(str)</span><br><span class=\"line\">    alert(str)</span><br></pre></td></tr></table></figure>\n\n","categories":["前端前期"],"tags":["Javascript初学","Js定义类"]},{"title":"对前面知识点的一个复习与总结","url":"/2021/07/12/JavascriptF/","content":"<h2 id=\"一-数据存储\"><a href=\"#一-数据存储\" class=\"headerlink\" title=\"一.数据存储\"></a>一.数据存储</h2><ol>\n<li><p>计算机内部使用**二进制 0 和 1 **来表示数据</p>\n</li>\n<li><p>所有数据，包括文件、图片等最终都是以二进制数据(0 和 1) 的形式存放在硬盘中的。</p>\n</li>\n<li><p>所有程序，包括操作系统，<strong>本质都是各种数据，也以二进制数据的形式存放在硬盘中。</strong>平时我们所说的安装软件，其实就是把程序文件复制到硬盘中。</p>\n</li>\n<li><p>硬盘、内存都是保存的二进制数据</p>\n</li>\n<li><h4 id=\"数据的存储单位\"><a href=\"#数据的存储单位\" class=\"headerlink\" title=\"数据的存储单位\"></a>数据的存储单位</h4><p>它的大小关系: bit &lt; byte &lt; kb &lt; GB &lt; TB 等等。。。</p>\n<p>1.位(bit): 1bit可以保存一个0或者1(最小的存储单位)</p>\n<p>2.字节(Byte): 1B &#x3D; 8b</p>\n<p>3.千字节(KB): 1KB &#x3D; 1024 B</p>\n</li>\n</ol>\n<h2 id=\"二-什么是JavaScript-是什么\"><a href=\"#二-什么是JavaScript-是什么\" class=\"headerlink\" title=\"二. 什么是JavaScript 是什么\"></a>二. 什么是JavaScript 是什么</h2><p>​        JavaScript是一种运行在客户端的脚本语言(Script是脚本的意思)</p>\n<p>​      1.JavaScript的作用</p>\n<pre><code>  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">可以制作表单动态监测(密码强度检测)，网页特效，服务端开发，桌面程序，小程序</span><br><span class=\"line\"></span><br><span class=\"line\">2.JavaScript的组成</span><br><span class=\"line\">这个是重点，面试的时候经常会被问</span><br></pre></td></tr></table></figure>\n</code></pre>\n<p>ECMAScript:ECMAScript  是一套标准，定义了一种语言是什么样子，是语言的约束条件</p>\n<p>DOM:<strong>(文档对象模型)</strong> 是W3C组织推荐的处理可扩展标记预压的标准编程接口，通过DOM提供的接口</p>\n<p>可以对页面上的各种元素进行操作</p>\n<p>BOM:<strong>(浏览器对象模型)</strong></p>\n<p>3.JS的三种写法</p>\n<p>行内式，内嵌式，外联式</p>\n<p>4.JS的输入输出语句</p>\n<p>alert , console.log , prompt,其中console.log是使用最多的输出语句，经常用于调试JS代码。</p>\n<h2 id=\"三-JavaScript的变量\"><a href=\"#三-JavaScript的变量\" class=\"headerlink\" title=\"三.JavaScript的变量\"></a>三.JavaScript的变量</h2><p>1.赋值方式</p>\n<p>使用var + 变量名 &#x3D; 字面量;将右侧的字面量存储到变量中，变为变量值</p>\n<p>2.变量命名规范</p>\n<p>1.由字母构成，在我之前的文章中有说过，(A<del>Z a</del>z)、 下划线 、美元符号$ 组成 例如 num num_name</p>\n<p>2.严格区分大小写，大小写不同的变量 是两个变量。</p>\n<p>3.不能以数字开头 ， 18age这种变量是错误的</p>\n<p>4.变量名必须有意义，方便之后的人理解，标签语义化</p>\n<p>5.遵守驼峰命名法 例如 myName outPut</p>\n<p>6.不要使用浏览器自带的变量，例如name已经在浏览器中有自己的意义，就不要再使用这个变量名</p>\n<h2 id=\"四-数据类型的分类\"><a href=\"#四-数据类型的分类\" class=\"headerlink\" title=\"四.数据类型的分类\"></a>四.数据类型的分类</h2><p><strong>(Number,Boolean,String),(undefined,null),</strong>(BigInt,Symbol),分为三组方便记忆，第一组经常会使用，第二组经常在输出和bug中看到，前两组都是重点，最后一组是新增的</p>\n<h2 id=\"五-运算符\"><a href=\"#五-运算符\" class=\"headerlink\" title=\"五.运算符\"></a>五.运算符</h2><p>1.运算符包括()，++ , – , ! , * , &#x2F; , + , - , &gt; , &gt;&#x3D; , &lt; , &lt;&#x3D;, &#x3D;&#x3D; , !&#x3D; , &#x3D;&#x3D;&#x3D; , !&#x3D;&#x3D; , &amp;&amp; ,||, &#x3D; , ,(逗号运算符) </p>\n<p>2.优先级</p>\n<p>上述的运算符的排列顺序为 小括号(())，一元运算符(++ ,– ,!)，算术运算符(*,&#x2F;,+,-)，关系运算符(&gt;,&gt;&#x3D;,&lt;,&lt;&#x3D;)，相等运算符( &#x3D;&#x3D; ,!&#x3D;, &#x3D;&#x3D;&#x3D; ,!&#x3D;&#x3D;)，逻辑运算符(&amp;&amp;,||)，赋值运算符(&#x3D;)，逗号运算符(,)</p>\n","categories":["前端前期"],"tags":["Javascript初学","Js定义类","复习"]},{"title":"使用arguments内置对象，翻转伪数组","url":"/2021/07/12/JavascriptG/","content":"<p>思路，不通过新建数组，直接翻转伪数组，翻转伪数组自身，需要对其进行首尾互换位置，所以再使用循环的时候，要注意交换次数不要等于它的数组元素数量，需要等于数组元素数量的一半</p>\n<p>代码为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// 定义一个函数</span><br><span class=\"line\">     function fn() &#123;</span><br><span class=\"line\">       //   使用for循环遍历数组</span><br><span class=\"line\">       // 循环次数应为数组元素数量的一半</span><br><span class=\"line\">       for (var i = 0; i &lt;= arguments.length / 2 - 1; i++) &#123;</span><br><span class=\"line\">         // 交换数组</span><br><span class=\"line\">       //   第一种方法为使用数组形式交换</span><br><span class=\"line\">         [arguments[i], arguments[arguments.length - 1 - i]] = [arguments[arguments.length - 1 - i] , arguments[i]];</span><br><span class=\"line\"></span><br><span class=\"line\">       //   第二个方法为，式中中间变量，交换元素  </span><br><span class=\"line\"></span><br><span class=\"line\">       //   var temp = arguments[i];</span><br><span class=\"line\">       //   arguments[i] = arguments[arguments.length - 1 - i];</span><br><span class=\"line\">       //   arguments[arguments.length - 1 - i] = temp;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       // 返回这个伪数组</span><br><span class=\"line\">       return arguments;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     var res = fn(1, 2, 3, 4, 5, 6, 7, 8, 9);</span><br><span class=\"line\">     console.log(res);</span><br></pre></td></tr></table></figure>\n\n","categories":["前端前期"],"tags":["Javascript初学","Js小案例"]},{"title":"运用函数计算闰年","url":"/2021/07/12/JavascriptH/","content":"<p>思路为，使用函数可以互相调用的属性，通过两个输出函数之间的调用得出闰年的结果，一个为计算函数，判断函数是否是闰年，第二个为输出函数，接受上一个函数传过来的返回值作为形参</p>\n<p>代码为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">          // 利用函数判断闰年</span><br><span class=\"line\">          function isRunyear(year)&#123;</span><br><span class=\"line\">      // 如果是闰年我们返回 true 否则 返回 flase</span><br><span class=\"line\">      if(year % 4 === 0 &amp;&amp; year % 100 !==0 || year % 400 == 0)&#123;</span><br><span class=\"line\">          return true</span><br><span class=\"line\">      &#125;else &#123;</span><br><span class=\"line\">          return false</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  function backDate()&#123;</span><br><span class=\"line\">      var year = prompt(&#x27;请输入年份&#x27;)</span><br><span class=\"line\">      if(isRunyear(year))&#123;</span><br><span class=\"line\">          alert(&#x27;通过强大的运算得出当前年份是闰年2月份有29天&#x27;)</span><br><span class=\"line\">      &#125;else&#123;</span><br><span class=\"line\">          alert(&#x27;通过强大的运算得出当前年份是平年2月份有28天&#x27;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">backDate()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","categories":["前端前期"],"tags":["Javascript初学","Js小案例"]},{"title":"Math函数的简单方法","url":"/2021/07/12/JavascriptI/","content":"<p>Math为window内置函数<br>Math.abs()——绝对值<br>Math.ceil()—–向下取整<br>Math.floor()—-向下取整<br>Math.round()—-四舍五入</p>\n<p>  演示代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// 取绝对值</span><br><span class=\"line\">     console.log(Math.abs(-1.2));</span><br><span class=\"line\">     console.log(Math.abs(123));</span><br><span class=\"line\">     console.log(Math.abs(-123));</span><br><span class=\"line\">     // 向上取整</span><br><span class=\"line\">     console.log(Math.ceil(1.1));</span><br><span class=\"line\">     console.log(Math.ceil(1.6));</span><br><span class=\"line\">     // 向下取整</span><br><span class=\"line\">     console.log(Math.floor(1.9));</span><br><span class=\"line\">     console.log(Math.floor(2.9));</span><br><span class=\"line\">     // 四舍五入</span><br><span class=\"line\">     console.log(Math.round(1.4));</span><br><span class=\"line\">     console.log(Math.round(1.5));</span><br></pre></td></tr></table></figure>\n\n","categories":["前端前期"],"tags":["Javascript初学","Js定义类","复习"]},{"title":"猜字游戏","url":"/2021/07/12/JavascriptJ/","content":"<p>需求，生成一个110之间的随机整数，再让用户输入一个110之间的数字，进行比较</p>\n<p>  代码为</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">var res = Math.floor(Math.random() *11);</span><br><span class=\"line\">  //   console.log(res);</span><br><span class=\"line\">    var count = 10</span><br><span class=\"line\">    while(true)&#123;</span><br><span class=\"line\">        var a = prompt(&#x27;请输入一个1~10之间的随机数&#x27;)</span><br><span class=\"line\">        count--</span><br><span class=\"line\">        if(count &lt; 0)&#123;</span><br><span class=\"line\">            alert(&#x27;超过次数&#x27;)</span><br><span class=\"line\">            break</span><br><span class=\"line\">        &#125;else if(a&gt;res)&#123;</span><br><span class=\"line\">        alert(&#x27;你输入大了&#x27;)</span><br><span class=\"line\">        &#125;else if(a&lt;res)&#123;</span><br><span class=\"line\">            alert(&#x27;你输入小了&#x27;)</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            alert(&#x27;对了&#x27;)</span><br><span class=\"line\">            break</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["前端前期"],"tags":["Javascript初学","Js小案例"]},{"title":"2022年618倒计时","url":"/2021/07/12/JavascriptK/","content":"<p>使用new Date()中的valueOf属性(+new Date.valueOf)获取目标距离1970年1月1日的毫秒数，在减去今天的毫秒数，再将毫秒转换为天，小时，分，秒，再进行补零，就可以实现</p>\n<p>代码如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// 封装倒计时函数</span><br><span class=\"line\">     function countDown(tYear,tMonth,tDay) &#123;</span><br><span class=\"line\">       var date = new Date();</span><br><span class=\"line\">       var nowDate = date.valueOf();</span><br><span class=\"line\">       var targetDate = +new Date(`$&#123;tYear&#125;-$&#123;tMonth&#125;-$&#123;tDay&#125;`);</span><br><span class=\"line\">       // console.log(nowDate);</span><br><span class=\"line\">       // console.log(targetTime);</span><br><span class=\"line\">       var res = targetDate - nowDate;</span><br><span class=\"line\">       var sec = parseInt((res / 1000) % 60);</span><br><span class=\"line\">       var min = parseInt((res / 1000 / 60) % 60);</span><br><span class=\"line\">       var hours = parseInt((res / 1000 / 60 / 60) % 24);</span><br><span class=\"line\">       var day = parseInt(res / 1000 / 60 / 60 / 24);</span><br><span class=\"line\">       // console.log(day);</span><br><span class=\"line\">       sec = sec &gt;= 10 ? sec : &quot;0&quot; + sec;</span><br><span class=\"line\">       min = min &gt;= 10 ? min : &quot;0&quot; + min;</span><br><span class=\"line\">       hours = hours &gt;= 10 ? hours : &quot;0&quot; + hours;</span><br><span class=\"line\">       return `618倒计时$&#123;day&#125;天-$&#123;hours&#125;小时-$&#123;min&#125;分-$&#123;sec&#125;秒`;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">     var a = countDown(2022,6,30);</span><br><span class=\"line\">     alert(a);</span><br></pre></td></tr></table></figure>\n\n","categories":["前端前期"],"tags":["Javascript初学","Js小案例"]},{"title":"静态成员实例成员和原型问题","url":"/2021/07/16/ajaxA/","content":"<h2 id=\"请求\"><a href=\"#请求\" class=\"headerlink\" title=\"请求\"></a>请求</h2><p>​      浏览器给我们提供了一个请求参数，类似在DOM操作中给我们提供了document用于调用DOM元素，在网页请求中，给我们了一盒XMLHTTPRequest()的方法让我们获取请求数据。</p>\n<h4 id=\"请求方式\"><a href=\"#请求方式\" class=\"headerlink\" title=\"请求方式\"></a>请求方式</h4><p>最常见的两种请求方式get,post方式，get是发送获取资源的请求，post是向服务器发送数据提交请求，例如向服务器发送用户注册信息。</p>\n<h2 id=\"AJAX\"><a href=\"#AJAX\" class=\"headerlink\" title=\"AJAX\"></a>AJAX</h2><h4 id=\"什么是ajax\"><a href=\"#什么是ajax\" class=\"headerlink\" title=\"什么是ajax\"></a>什么是ajax</h4><p>在网页中利用XMLHTTPRequest()对象和服务器进行数据交换的方式就是ajax</p>\n","categories":["前端学习中期"],"tags":["ajax","数据传输"]},{"title":"静态成员实例成员和原型问题","url":"/2021/07/16/javascript/","content":"<h3 id=\"实例成员\"><a href=\"#实例成员\" class=\"headerlink\" title=\"实例成员\"></a>实例成员</h3><h6 id=\"构造函数中的属性和方法称为成员，成员可以添加，先创建一个构造函数，构造函数的命名可以使大-写或者小写的字母，但是在W3C规范中，要求必须首字母大写。\"><a href=\"#构造函数中的属性和方法称为成员，成员可以添加，先创建一个构造函数，构造函数的命名可以使大-写或者小写的字母，但是在W3C规范中，要求必须首字母大写。\" class=\"headerlink\" title=\"构造函数中的属性和方法称为成员，成员可以添加，先创建一个构造函数，构造函数的命名可以使大     写或者小写的字母，但是在W3C规范中，要求必须首字母大写。\"></a>构造函数中的属性和方法称为成员，成员可以添加，先创建一个构造函数，构造函数的命名可以使大     写或者小写的字母，但是在W3C规范中，要求必须首字母大写。</h6><h6 id=\"创建构造函数之后，在写出它的实例对象\"><a href=\"#创建构造函数之后，在写出它的实例对象\" class=\"headerlink\" title=\"创建构造函数之后，在写出它的实例对象\"></a>创建构造函数之后，在写出它的实例对象</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">function Star(uname, age) &#123;</span><br><span class=\"line\">       this.uname = uname;</span><br><span class=\"line\">       this.age = age;</span><br><span class=\"line\">       this.sing = function() &#123;</span><br><span class=\"line\">           console.log(&#x27;我会唱歌&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">var ldh = new Star(&#x27;刘德华&#x27;, 18);</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"实例成员就是构造函数内部通过this添加的成员-例如在这个构造函数中-uname-age-sing都是实例成员\"><a href=\"#实例成员就是构造函数内部通过this添加的成员-例如在这个构造函数中-uname-age-sing都是实例成员\" class=\"headerlink\" title=\"实例成员就是构造函数内部通过this添加的成员 例如在这个构造函数中 uname age sing都是实例成员\"></a>实例成员就是构造函数内部通过this添加的成员 例如在这个构造函数中 uname age sing都是实例成员</h6><h6 id=\"实例成员只能通过实例对象来访问\"><a href=\"#实例成员只能通过实例对象来访问\" class=\"headerlink\" title=\"实例成员只能通过实例对象来访问\"></a>实例成员只能通过实例对象来访问</h6><h3 id=\"静态成员\"><a href=\"#静态成员\" class=\"headerlink\" title=\"静态成员\"></a>静态成员</h3><h6 id=\"在构造函数本身添加的成员是静态成员，如\"><a href=\"#在构造函数本身添加的成员是静态成员，如\" class=\"headerlink\" title=\"在构造函数本身添加的成员是静态成员，如\"></a>在构造函数本身添加的成员是静态成员，如</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Star.sex = &#x27;男&#x27;;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"我们访问静态成员只能通过构造函数，换一种理解，我们在谁身上添加的成员就只能通过谁来访问\"><a href=\"#我们访问静态成员只能通过构造函数，换一种理解，我们在谁身上添加的成员就只能通过谁来访问\" class=\"headerlink\" title=\"我们访问静态成员只能通过构造函数，换一种理解，我们在谁身上添加的成员就只能通过谁来访问\"></a>我们访问静态成员只能通过构造函数，换一种理解，我们在谁身上添加的成员就只能通过谁来访问</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">console.log(Star.sex);</span><br><span class=\"line\">console.log(ldh.sex); // 不能通过对象来访问</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"原型问题\"><a href=\"#原型问题\" class=\"headerlink\" title=\"原型问题\"></a>原型问题</h3><h6 id=\"一般情况下，公共属性定义在构造函数里公共方法放到原型对象里\"><a href=\"#一般情况下，公共属性定义在构造函数里公共方法放到原型对象里\" class=\"headerlink\" title=\"一般情况下，公共属性定义在构造函数里公共方法放到原型对象里\"></a>一般情况下，公共属性定义在构造函数里公共方法放到原型对象里</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// 1. 构造函数的问题. </span><br><span class=\"line\">   function Star(uname, age) &#123;</span><br><span class=\"line\">       this.uname = uname;</span><br><span class=\"line\">       this.age = age;</span><br><span class=\"line\">       // this.sing = function() &#123;</span><br><span class=\"line\">       //     console.log(&#x27;我会唱歌&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">       // &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   Star.prototype.sing = function() &#123;</span><br><span class=\"line\">       console.log(&#x27;我会唱歌&#x27;);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   var ldh = new Star(&#x27;刘德华&#x27;, 18);</span><br><span class=\"line\">   var zxy = new Star(&#x27;张学友&#x27;, 19);</span><br><span class=\"line\">   console.log(ldh.sing === zxy.sing);</span><br><span class=\"line\">   // console.dir(Star);</span><br><span class=\"line\">   ldh.sing();</span><br><span class=\"line\">   zxy.sing();</span><br></pre></td></tr></table></figure>\n\n\n\n<h6 id=\"整一方面方便调用方法，同时又不会有this指向混乱的问题，方便理解\"><a href=\"#整一方面方便调用方法，同时又不会有this指向混乱的问题，方便理解\" class=\"headerlink\" title=\"整一方面方便调用方法，同时又不会有this指向混乱的问题，方便理解\"></a>整一方面方便调用方法，同时又不会有this指向混乱的问题，方便理解</h6>","categories":["前端学习中期"],"tags":["Js高级","ES6类","原型链","概念类"]},{"title":"使用vue制作简单价格表(1)","url":"/2021/08/18/javascriptAA/","content":"<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;container&quot;&gt;</span><br><span class=\"line\">      &lt;!-- 顶部框模块 --&gt;</span><br><span class=\"line\">      &lt;div class=&quot;form-group&quot;&gt;</span><br><span class=\"line\">        &lt;div class=&quot;input-group&quot;&gt;</span><br><span class=\"line\">          &lt;h4&gt;品牌管理&lt;/h4&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      &lt;!-- 数据表格 --&gt;</span><br><span class=\"line\">      &lt;table class=&quot;table table-bordered table-hover mt-2&quot;&gt;</span><br><span class=\"line\">        &lt;thead&gt;</span><br><span class=\"line\">          &lt;tr&gt;</span><br><span class=\"line\">            &lt;th&gt;编号&lt;/th&gt;</span><br><span class=\"line\">            &lt;th&gt;资产名称&lt;/th&gt;</span><br><span class=\"line\">            &lt;th&gt;价格&lt;/th&gt;</span><br><span class=\"line\">            &lt;th&gt;创建时间&lt;/th&gt;</span><br><span class=\"line\">            &lt;th&gt;操作&lt;/th&gt;</span><br><span class=\"line\">          &lt;/tr&gt;</span><br><span class=\"line\">        &lt;/thead&gt;</span><br><span class=\"line\">        &lt;tbody&gt;</span><br><span class=\"line\">          &lt;tr v-for=&quot;(val,index) in list&quot; :key=&quot;index&quot;&gt;</span><br><span class=\"line\">            &lt;td&gt;&#123;&#123;val.id&#125;&#125;&lt;/td&gt;</span><br><span class=\"line\">            &lt;td&gt;&#123;&#123;val.name&#125;&#125;&lt;/td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">            &lt;!-- 如果价格超过100，就有red这个类 --&gt;</span><br><span class=\"line\">            &lt;td :class=&quot;&#123;red:val.price&gt;100&#125;&quot;&gt;&#123;&#123;val.price&#125;&#125;&lt;/td&gt;</span><br><span class=\"line\">            &lt;td&gt;&#123;&#123; val.time | formatDate &#125;&#125;&lt;/td&gt;</span><br><span class=\"line\">            &lt;td&gt;&lt;a href=&quot;#&quot; @click.prevent=&quot;deleteChild(val.id)&quot;&gt;删除&lt;/a&gt;&lt;/td&gt;</span><br><span class=\"line\">          &lt;/tr&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">          &lt;tr style=&quot;background-color: #EEE&quot; v-if=&quot;this.list.length &gt; 0&quot;&gt;</span><br><span class=\"line\">     &lt;td&gt;统计:&lt;/td&gt;</span><br><span class=\"line\">     &lt;td colspan=&quot;2&quot;&gt;总价钱为: &#123;&#123; allPrice &#125;&#125;&lt;/td&gt;</span><br><span class=\"line\">     &lt;td colspan=&quot;2&quot;&gt;平均价: &#123;&#123; svgPrice &#125;&#125;&lt;/td&gt;</span><br><span class=\"line\">&lt;/tr&gt;</span><br><span class=\"line\">        &lt;/tbody&gt;</span><br><span class=\"line\">          </span><br><span class=\"line\">        &lt;tfoot v-if=&quot;list.length === 0&quot;&gt;</span><br><span class=\"line\">          &lt;tr&gt;</span><br><span class=\"line\">            &lt;td colspan=&quot;5&quot; style=&quot;text-align: center&quot;&gt;暂无数据&lt;/td&gt;</span><br><span class=\"line\">          &lt;/tr&gt;</span><br><span class=\"line\">        &lt;/tfoot&gt;</span><br><span class=\"line\">           </span><br><span class=\"line\">      &lt;/table&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      &lt;!-- 添加资产 --&gt;</span><br><span class=\"line\">      &lt;form class=&quot;form-inline&quot; &gt;</span><br><span class=\"line\">        &lt;div class=&quot;form-group&quot;&gt;</span><br><span class=\"line\">          &lt;div class=&quot;input-group&quot;&gt;</span><br><span class=\"line\">            &lt;input</span><br><span class=\"line\">              type=&quot;text&quot;</span><br><span class=\"line\">              class=&quot;form-control&quot;</span><br><span class=\"line\">              placeholder=&quot;资产名称&quot;</span><br><span class=\"line\">              v-model.trim=&quot;form.name&quot;</span><br><span class=\"line\">            /&gt;</span><br><span class=\"line\">          &lt;/div&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">        &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;</span><br><span class=\"line\">        &lt;div class=&quot;form-group&quot;&gt;</span><br><span class=\"line\">          &lt;div class=&quot;input-group&quot;&gt;</span><br><span class=\"line\">            &lt;input</span><br><span class=\"line\">              type=&quot;text&quot;</span><br><span class=\"line\">              class=&quot;form-control&quot;</span><br><span class=\"line\">              placeholder=&quot;价格&quot;</span><br><span class=\"line\">              v-model.number=&quot;form.price&quot;</span><br><span class=\"line\">            /&gt;</span><br><span class=\"line\">          &lt;/div&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">        &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;</span><br><span class=\"line\">        &lt;!-- 阻止表单提交 --&gt;</span><br><span class=\"line\">        &lt;button class=&quot;btn btn-primary&quot;  @click.prevent=&quot;addChild&quot;&gt;添加资产&lt;/button&gt;</span><br><span class=\"line\">      &lt;/form&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">// 1. 明确需求</span><br><span class=\"line\">// 2. 标签+样式+默认数据</span><br><span class=\"line\">// 3. 下载bootstrap, main.js引入bootstrap.css</span><br><span class=\"line\">// 4. 把list数组 - 铺设表格</span><br><span class=\"line\">// 5. 修改价格颜色</span><br><span class=\"line\">import moment from &#x27;moment&#x27;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      form: &#123;</span><br><span class=\"line\">          name: &#x27;&#x27;, // 名称</span><br><span class=\"line\">          price: 0, // 价格</span><br><span class=\"line\">          allPrice:0, //总价</span><br><span class=\"line\">          svgPrice:0, //平均价</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      list: JSON.parse(localStorage.getItem(&#x27;LISTS&#x27;)) || [],</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  filters: &#123; </span><br><span class=\"line\">    formatDate (val)&#123;</span><br><span class=\"line\">        return moment(val).format(&#x27;YYYY-MM-DD&#x27;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">watch: &#123;</span><br><span class=\"line\">   &#x27;list&#x27;:&#123;</span><br><span class=\"line\">     deep:true,</span><br><span class=\"line\">     handler()&#123;</span><br><span class=\"line\">       localStorage.setItem(&#x27;LISTS&#x27;,JSON.stringify(this.list))</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">      addChild()&#123;</span><br><span class=\"line\">          if(this.form.name.length === 0 || this.form.price &lt; 1)&#123;</span><br><span class=\"line\">              alert(&#x27;请输入正确格式&#x27;)</span><br><span class=\"line\">              return</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">           </span><br><span class=\"line\"></span><br><span class=\"line\">          let newChild = &#123;</span><br><span class=\"line\">              id: this.list.length&gt;0 ?(this.list[this.list.length-1].id+1): 100,</span><br><span class=\"line\">              name:this.form.name,</span><br><span class=\"line\">              price:this.form.price,</span><br><span class=\"line\">              time:new Date(),</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          this.list.push(newChild)</span><br><span class=\"line\">          this.form.price=0</span><br><span class=\"line\">          this.form.name = &#x27;&#x27;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      deleteChild(id)&#123;</span><br><span class=\"line\">          let index = this.list.findIndex(val =&gt; val.id === id)</span><br><span class=\"line\">          this.list.splice(index,1)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"> computed: &#123;</span><br><span class=\"line\">  //  总价</span><br><span class=\"line\">    &quot;allPrice&quot; () &#123;</span><br><span class=\"line\">        return this.list.reduce((sum,val) =&gt; sum+=val.price,0)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    // </span><br><span class=\"line\">    &#x27;svgPrice&#x27;()&#123;</span><br><span class=\"line\">      return (this.allPrice/this.list.length).toFixed(2)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style &gt;</span><br><span class=\"line\">.red&#123;</span><br><span class=\"line\">  color: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n<p>项目创建流程，安装node,@vue&#x2F;cil脚手架,在cmd终端中输入vue create 你要创建的文件名,自动生成了环境之后，删除HELLOVUE页面，生成，引入，定义，使用，这样我的环境就搭建成功了。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;container&quot;&gt;</span><br><span class=\"line\">      &lt;!-- 顶部框模块 --&gt;</span><br><span class=\"line\">      &lt;div class=&quot;form-group&quot;&gt;</span><br><span class=\"line\">        &lt;div class=&quot;input-group&quot;&gt;</span><br><span class=\"line\">          &lt;h4&gt;品牌管理&lt;/h4&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      &lt;!-- 数据表格 --&gt;</span><br><span class=\"line\">      &lt;table class=&quot;table table-bordered table-hover mt-2&quot;&gt;</span><br><span class=\"line\">        &lt;thead&gt;</span><br><span class=\"line\">          &lt;tr&gt;</span><br><span class=\"line\">            &lt;th&gt;编号&lt;/th&gt;</span><br><span class=\"line\">            &lt;th&gt;资产名称&lt;/th&gt;</span><br><span class=\"line\">            &lt;th&gt;价格&lt;/th&gt;</span><br><span class=\"line\">            &lt;th&gt;创建时间&lt;/th&gt;</span><br><span class=\"line\">            &lt;th&gt;操作&lt;/th&gt;</span><br><span class=\"line\">          &lt;/tr&gt;</span><br><span class=\"line\">        &lt;/thead&gt;</span><br><span class=\"line\">        &lt;tbody&gt;</span><br><span class=\"line\">          &lt;tr v-for=&quot;(val,index) in list&quot; :key=&quot;index&quot;&gt;</span><br><span class=\"line\">            &lt;td&gt;&#123;&#123;val.id&#125;&#125;&lt;/td&gt;</span><br><span class=\"line\">            &lt;td&gt;&#123;&#123;val.name&#125;&#125;&lt;/td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">            &lt;!-- 如果价格超过100，就有red这个类 --&gt;</span><br><span class=\"line\">            &lt;td :class=&quot;&#123;red:val.price&gt;100&#125;&quot;&gt;&#123;&#123;val.price&#125;&#125;&lt;/td&gt;</span><br><span class=\"line\">            &lt;td&gt;&#123;&#123; val.time | formatDate &#125;&#125;&lt;/td&gt;</span><br><span class=\"line\">            &lt;td&gt;&lt;a href=&quot;#&quot; @click.prevent=&quot;deleteChild(val.id)&quot;&gt;删除&lt;/a&gt;&lt;/td&gt;</span><br><span class=\"line\">          &lt;/tr&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">          &lt;tr style=&quot;background-color: #EEE&quot; v-if=&quot;this.list.length &gt; 0&quot;&gt;</span><br><span class=\"line\">     &lt;td&gt;统计:&lt;/td&gt;</span><br><span class=\"line\">     &lt;td colspan=&quot;2&quot;&gt;总价钱为: &#123;&#123; allPrice &#125;&#125;&lt;/td&gt;</span><br><span class=\"line\">     &lt;td colspan=&quot;2&quot;&gt;平均价: &#123;&#123; svgPrice &#125;&#125;&lt;/td&gt;</span><br><span class=\"line\">&lt;/tr&gt;</span><br><span class=\"line\">        &lt;/tbody&gt;</span><br><span class=\"line\">          </span><br><span class=\"line\">        &lt;tfoot v-if=&quot;list.length === 0&quot;&gt;</span><br><span class=\"line\">          &lt;tr&gt;</span><br><span class=\"line\">            &lt;td colspan=&quot;5&quot; style=&quot;text-align: center&quot;&gt;暂无数据&lt;/td&gt;</span><br><span class=\"line\">          &lt;/tr&gt;</span><br><span class=\"line\">        &lt;/tfoot&gt;</span><br><span class=\"line\">           </span><br><span class=\"line\">      &lt;/table&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      &lt;!-- 添加资产 --&gt;</span><br><span class=\"line\">      &lt;form class=&quot;form-inline&quot; &gt;</span><br><span class=\"line\">        &lt;div class=&quot;form-group&quot;&gt;</span><br><span class=\"line\">          &lt;div class=&quot;input-group&quot;&gt;</span><br><span class=\"line\">            &lt;input</span><br><span class=\"line\">              type=&quot;text&quot;</span><br><span class=\"line\">              class=&quot;form-control&quot;</span><br><span class=\"line\">              placeholder=&quot;资产名称&quot;</span><br><span class=\"line\">              v-model.trim=&quot;form.name&quot;</span><br><span class=\"line\">            /&gt;</span><br><span class=\"line\">          &lt;/div&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">        &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;</span><br><span class=\"line\">        &lt;div class=&quot;form-group&quot;&gt;</span><br><span class=\"line\">          &lt;div class=&quot;input-group&quot;&gt;</span><br><span class=\"line\">            &lt;input</span><br><span class=\"line\">              type=&quot;text&quot;</span><br><span class=\"line\">              class=&quot;form-control&quot;</span><br><span class=\"line\">              placeholder=&quot;价格&quot;</span><br><span class=\"line\">              v-model.number=&quot;form.price&quot;</span><br><span class=\"line\">            /&gt;</span><br><span class=\"line\">          &lt;/div&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">        &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;</span><br><span class=\"line\">        &lt;!-- 阻止表单提交 --&gt;</span><br><span class=\"line\">        &lt;button class=&quot;btn btn-primary&quot;  @click.prevent=&quot;addChild&quot;&gt;添加资产&lt;/button&gt;</span><br><span class=\"line\">      &lt;/form&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"静态页面布局\"><a href=\"#静态页面布局\" class=\"headerlink\" title=\"静态页面布局\"></a><strong>静态页面布局</strong></h3><p>​     页面写在template中，我在这个项目中使用的是bootscrap插件实现的样式，写好表格，输入框，按钮。在表格中要为数据渲染准备环境，预制渲染位置</p>\n<p>​    在标签中使用v-for实现动态数据的循环，使用:class实现动态class（类）,v-show和v-if实现隐藏其中v-show和v-if的区别是v-show是通过display属性实现隐藏和显示，在实现影藏和显示经常切换的条件下使用v-show,而v-if是在DOM树直接删除数据，所以不要在经常切换的条件下使用，很影响性能。而要实现动态数据渲染还需要对数据进行绑定，如v-model实现双向绑定，将变量与标签值绑定在一起实现动态渲染，v-for是有更新检测的，在数据更新之后可以立刻改变页面元素。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">// 1. 明确需求</span><br><span class=\"line\">// 2. 标签+样式+默认数据</span><br><span class=\"line\">// 3. 下载bootstrap, main.js引入bootstrap.css</span><br><span class=\"line\">// 4. 把list数组 - 铺设表格</span><br><span class=\"line\">// 5. 修改价格颜色</span><br><span class=\"line\">import moment from &#x27;moment&#x27;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      form: &#123;</span><br><span class=\"line\">          name: &#x27;&#x27;, // 名称</span><br><span class=\"line\">          price: 0, // 价格</span><br><span class=\"line\">          allPrice:0, //总价</span><br><span class=\"line\">          svgPrice:0, //平均价</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      list: JSON.parse(localStorage.getItem(&#x27;LISTS&#x27;)) || [],</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  filters: &#123; </span><br><span class=\"line\">    formatDate (val)&#123;</span><br><span class=\"line\">        return moment(val).format(&#x27;YYYY-MM-DD&#x27;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">watch: &#123;</span><br><span class=\"line\">   &#x27;list&#x27;:&#123;</span><br><span class=\"line\">     deep:true,</span><br><span class=\"line\">     handler()&#123;</span><br><span class=\"line\">       localStorage.setItem(&#x27;LISTS&#x27;,JSON.stringify(this.list))</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">      addChild()&#123;</span><br><span class=\"line\">          if(this.form.name.length === 0 || this.form.price &lt; 1)&#123;</span><br><span class=\"line\">              alert(&#x27;请输入正确格式&#x27;)</span><br><span class=\"line\">              return</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">           </span><br><span class=\"line\"></span><br><span class=\"line\">          let newChild = &#123;</span><br><span class=\"line\">              id: this.list.length&gt;0 ?(this.list[this.list.length-1].id+1): 100,</span><br><span class=\"line\">              name:this.form.name,</span><br><span class=\"line\">              price:this.form.price,</span><br><span class=\"line\">              time:new Date(),</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          this.list.push(newChild)</span><br><span class=\"line\">          this.form.price=0</span><br><span class=\"line\">          this.form.name = &#x27;&#x27;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      deleteChild(id)&#123;</span><br><span class=\"line\">          let index = this.list.findIndex(val =&gt; val.id === id)</span><br><span class=\"line\">          this.list.splice(index,1)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"> computed: &#123;</span><br><span class=\"line\">  //  总价</span><br><span class=\"line\">    &quot;allPrice&quot; () &#123;</span><br><span class=\"line\">        return this.list.reduce((sum,val) =&gt; sum+=val.price,0)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    // </span><br><span class=\"line\">    &#x27;svgPrice&#x27;()&#123;</span><br><span class=\"line\">      return (this.allPrice/this.list.length).toFixed(2)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"vue中的export与export-default的区别\"><a href=\"#vue中的export与export-default的区别\" class=\"headerlink\" title=\"vue中的export与export default的区别\"></a>vue中的export与export default的区别</h3><p>   <strong>相同点：</strong></p>\n<ul>\n<li><p>export与export default均可用于导出常量、函数、文件、模块等</p>\n</li>\n<li><p>都可以使用import导入</p>\n<p> <strong>不同点：</strong></p>\n</li>\n<li><p>export可以有多个，export default只能有一个</p>\n</li>\n<li><p>通过export方式导出，在导入时要加{ }，export则不需要</p>\n</li>\n<li><p>使用export default为模块指定默认输出，导入时只需要知道文件名即可，但是使用export必须知道导出的变量或者函数等，导入时变量名要一致。</p>\n</li>\n</ul>\n<h4 id=\"VUE中的组件是什么\"><a href=\"#VUE中的组件是什么\" class=\"headerlink\" title=\"VUE中的组件是什么\"></a>VUE中的组件是什么</h4><p>​         组件是Vue中的一个重要概念，是一个可以<strong>重复使用</strong>的Vue实例，它拥有<strong>独一无二的组件名称</strong>，它可以扩展HTML元素，以组件名称的方式作为自定义的HTML标签。因为组件是可复用的Vue实例，所以它们与new Vue（）接收相同的选项，例如data，computed、watch、methods以及生命周期钩子等。仅有的例外是像el这样根实例特有的选项。</p>\n<p>把一些公共的模块抽取出来，然后写成单独的的工具组件或者页面，在需要的页面中就<strong>直接引入即可</strong>。那么我们可以将其抽出为一个组件进行复用。</p>\n<p>例如 页面头部、侧边、内容区，尾部，上传图片，等多个页面要用到一样的就可以做成组件，<strong>提高了代码的复用率</strong>。</p>\n<p>​       在vue的js代码中要实现方法，变量，监听，过滤的功能就要首先在export default中创建选项 </p>\n<p>​    在data中实现变量的定义，在methods中实现对方法的定义，在filters中实现对过滤器的定义</p>\n","categories":["前端学习中期"],"tags":["VUE","基础","项目类"]},{"title":"使用for循环绑定事件，和绑定监听事件做一个小demo","url":"/2021/07/12/javascriptL/","content":"<p>目标，第一个功能，通过按钮，生成带内容的li标签，这里我选择使用一个数组，之后从数组中抽取内容添加到新建的li标签中，再把li标    </p>\n<p>   签插入到按钮之后</p>\n<p>   第二个功能，当把鼠标放到li标签上的时候，li标签背景色变红，鼠标移开后，恢复背景色</p>\n<p>思路，获取元素，获取按钮，之后为按钮添加事件，绑定元素为li标签的父标签ul上，之后为在button的点击事件中新建的li标签通过for循环遍历li,为其添加上内容，内容要在函数外通过新建数组，再用一个不断变化的变量作为数组的索引值，把数组中的元素赋值给li标签。最后给ul绑定监听事件，添加鼠标移入移出时候的变化</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;button&gt;点击添加&lt;/button&gt;</span><br><span class=\"line\">    &lt;ul&gt;&lt;/ul&gt;</span><br><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">    var btn = document.querySelector(&quot;button&quot;);</span><br><span class=\"line\">    var ul = document.querySelector(&quot;ul&quot;);</span><br><span class=\"line\">    var num = 1;</span><br><span class=\"line\">    var arr = [&quot;王昭君&quot;, &quot;西施&quot;, &quot;貂蝉&quot;, &quot;杨玉环&quot;, &quot;李海林&quot;];</span><br><span class=\"line\">    btn.onclick = function () &#123;</span><br><span class=\"line\">      var li = document.createElement(&quot;li&quot;);</span><br><span class=\"line\">    //   var ran = Math.floor(Math.random() * 5);</span><br><span class=\"line\">    //   li.innerHTML = `$&#123;arr[ran]&#125;`;</span><br><span class=\"line\">      li.innerHTML = `$&#123;arr[num]&#125;`;</span><br><span class=\"line\">      if(num &lt; arr.length -1 )&#123;</span><br><span class=\"line\">          num++</span><br><span class=\"line\">      &#125;else&#123;</span><br><span class=\"line\">          num = 0</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      ul.insertBefore(li, ul.children[0]);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    var li = document.querySelectorAll(&quot;li&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    ul.addEventListener(&quot;mouseover&quot;, function (e) &#123;</span><br><span class=\"line\">      e.target.style.backgroundColor = &quot;red&quot;;</span><br><span class=\"line\">      // e.stopPropagation()</span><br><span class=\"line\">      ul.style.backgroundColor = &quot;#fff&quot;;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    ul.addEventListener(&#x27;mouseout&#x27;,function(e)&#123;</span><br><span class=\"line\">       e.target.style.backgroundColor = &#x27;#fff&#x27; </span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n","categories":["前端前期"],"tags":["Javascript初学","Js小案例"]},{"title":"使用事件委托制作一个选择更改背景图效果","url":"/2021/07/12/javascriptM/","content":"<p>在学完addEventListener之后，发现这个事件委托的功能特别强大，可以覆盖掉之前学过的好多知识，比如说之前清除陈旧样式需要使用for循环之后再判断，而现在只需要一个addEventListener(事件监听，也可称作事件委托)就完事了，首先这个事件委托的格式为 xxx.addEventListener(‘绑定事件’,’绑定函数’,’useCapture’),第三个参数的意思为，当它的值为false是，默认事件冒泡，为true时，默认事件捕获。<br>事件捕获就是例如一个简单的点击事件，是从Document 传入html,再到body再到父盒子，之后才是目标对象，是遵循这样的一个流程。<br>事件冒泡是一个响应的过程，从你的目标对象，再通过这个路径传出。</p>\n<p>实现点击图片更换效果时，我需要对目标对象的 &gt;&#x3D; 一级以上的盒子，添加一个事件监听方法，将目标对象的事件委托给 被监听的对象，在更改背景图之前我还需要做一个判断，让除目标对象之外的盒子效果不会被选中，这里我是用了一个if判断，如果标签与我期望的标签属性名不相等，那就直接return不执行。这里需要注意绑定函数中的参数e(Event)的指向和使用问题，e.target是指向的目标，可以对其添加nodeName 目标对象的标签。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;</span><br><span class=\"line\">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot; /&gt;</span><br><span class=\"line\">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class=\"line\">    &lt;style&gt;</span><br><span class=\"line\">      * &#123;</span><br><span class=\"line\">        margin: 0;</span><br><span class=\"line\">        padding: 0;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      body &#123;</span><br><span class=\"line\">        background: url(images/1.jpg) no-repeat center top;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      li &#123;</span><br><span class=\"line\">        list-style: none;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      .baidu &#123;</span><br><span class=\"line\">        overflow: hidden;</span><br><span class=\"line\">        margin: 100px auto;</span><br><span class=\"line\">        background-color: #fff;</span><br><span class=\"line\">        /* width: 410px; */</span><br><span class=\"line\">        width: 430px;</span><br><span class=\"line\">        padding-top: 3px;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      .baidu li &#123;</span><br><span class=\"line\">        float: left;</span><br><span class=\"line\">        margin: 0 1px;</span><br><span class=\"line\">        cursor: pointer;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      .baidu img &#123;</span><br><span class=\"line\">        width: 100px;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">  &lt;/head&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;body&gt;</span><br><span class=\"line\">    &lt;ul class=&quot;baidu&quot;&gt;</span><br><span class=\"line\">      &lt;li&gt;&lt;img src=&quot;images/1.jpg&quot; /&gt;&lt;/li&gt;</span><br><span class=\"line\">      &lt;li&gt;&lt;img src=&quot;images/2.jpg&quot; /&gt;&lt;/li&gt;</span><br><span class=\"line\">      &lt;li&gt;&lt;img src=&quot;images/3.jpg&quot; /&gt;&lt;/li&gt;</span><br><span class=\"line\">      &lt;li&gt;&lt;img src=&quot;images/4.jpg&quot; /&gt;&lt;/li&gt;</span><br><span class=\"line\">    &lt;/ul&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">        var ul = document.querySelector(&#x27;ul&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">        var imgs = document.querySelectorAll(&#x27;img&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">        var body = document.querySelector(&#x27;body&#x27;)</span><br><span class=\"line\">        </span><br><span class=\"line\">        ul.addEventListener(&#x27;click&#x27;,function(e)&#123;</span><br><span class=\"line\">            if(e.target.nodeName !== &#x27;IMG&#x27;) return</span><br><span class=\"line\">            // console.log(e.target.nodeName);</span><br><span class=\"line\">               body.style.backgroundImage = `url($&#123;e.target.src&#125;)`</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">      </span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n","categories":["前端前期"],"tags":["Javascript初学","Js小案例"]},{"title":"使用JS创建一个动态表格","url":"/2021/07/12/javascriptN/","content":"<p>根据已有的对象，创建一个动态表格，数据如下</p>\n<img src=\"C:/Users/dell/Desktop/截图保存/需求图1.png\" style=\"zoom:80%;\" />\n\n\n<p>根据数据中的数据个数，以及每个元素的属性值确定表格行列数，为表格最后添加一个删除按钮,使用循环可以实现添加功能，在循环外再为按钮添加功能<br>代码如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// ! 在tbody里面 创建tr ， tr 的个数由对象的个数决定，有多少人，创建多少个tr</span><br><span class=\"line\"></span><br><span class=\"line\">// 也就是 data.lengh决定多少个tr</span><br><span class=\"line\"></span><br><span class=\"line\">var tbody = document.querySelector(&#x27;tbody&#x27;)</span><br><span class=\"line\">for(var i = 0; i&lt;datas.length; i++)&#123;</span><br><span class=\"line\">    var tr = document.createElement(&#x27;tr&#x27;)</span><br><span class=\"line\">    tbody.appendChild(tr)</span><br><span class=\"line\"></span><br><span class=\"line\">    //! 2.在新创建的的tr中创建td单元格，td的数量取决于每个对象里的属性个数</span><br><span class=\"line\">    console.log(datas[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">    for(var k in datas[i])&#123;</span><br><span class=\"line\">        var td = document.createElement(&#x27;td&#x27;)</span><br><span class=\"line\">        td.innerHTML = datas[i][k]</span><br><span class=\"line\">        tr.appendChild(td)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // ! 3.创建删除按钮</span><br><span class=\"line\">    var deleteTd = document.createElement(&#x27;td&#x27;)</span><br><span class=\"line\">     deleteTd.innerHTML = `&lt;a href =&quot;#&quot;&gt;删除&lt;/a&gt;`</span><br><span class=\"line\">     tr.appendChild(deleteTd)</span><br><span class=\"line\"></span><br><span class=\"line\">     </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    var deleteBtn = document.querySelectorAll(&#x27;tbody a&#x27;) //伪数组</span><br><span class=\"line\">    console.log(deleteBtn);</span><br><span class=\"line\"></span><br><span class=\"line\">    for(var i = 0; i &lt; deleteBtn.length; i++)&#123;</span><br><span class=\"line\">        deleteBtn[i].onclick = function()&#123;</span><br><span class=\"line\">            console.log(this);</span><br><span class=\"line\">            tbody.removeChild(this.parentNode.parentNode)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n","categories":["前端前期"],"tags":["Javascript初学","Js小案例"]},{"title":"根据data数据，创建一个可以将元素上移下移，删除的动态表格","url":"/2021/07/12/javascriptO/","content":"<p>主要是用for循环遍历元素，使用兄弟节点，子节点，事件监听</p>\n   <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class=\"line\">    &lt;style&gt;</span><br><span class=\"line\">        table &#123;</span><br><span class=\"line\">            width: 500px;</span><br><span class=\"line\">            margin: 100px auto;</span><br><span class=\"line\">            border-collapse: collapse;</span><br><span class=\"line\">            text-align: center;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        td,</span><br><span class=\"line\">        th &#123;</span><br><span class=\"line\">            border: 1px solid #333;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        thead tr &#123;</span><br><span class=\"line\">            height: 40px;</span><br><span class=\"line\">            background-color: #ccc;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;table cellspacing=&quot;0&quot;&gt;</span><br><span class=\"line\">        &lt;thead&gt;</span><br><span class=\"line\">            &lt;tr&gt;</span><br><span class=\"line\">                &lt;th&gt;姓名&lt;/th&gt;</span><br><span class=\"line\">                &lt;th&gt;科目&lt;/th&gt;</span><br><span class=\"line\">                &lt;th&gt;成绩&lt;/th&gt;</span><br><span class=\"line\">                &lt;th&gt;操作&lt;/th&gt;</span><br><span class=\"line\">                &lt;th&gt;&lt;/th&gt;</span><br><span class=\"line\">                &lt;th&gt;&lt;/th&gt;</span><br><span class=\"line\">            &lt;/tr&gt;</span><br><span class=\"line\">        &lt;/thead&gt;</span><br><span class=\"line\">        &lt;tbody&gt;</span><br><span class=\"line\">            &lt;!-- 动态创建 --&gt;</span><br><span class=\"line\">        &lt;/tbody&gt;</span><br><span class=\"line\">    &lt;/table&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">            var datas = [&#123;</span><br><span class=\"line\">            name: &#x27;魏璎珞&#x27;,</span><br><span class=\"line\">            subject: &#x27;0&#x27;,</span><br><span class=\"line\">            score: 100</span><br><span class=\"line\">        &#125;, &#123;</span><br><span class=\"line\">            name: &#x27;弘历&#x27;,</span><br><span class=\"line\">            subject: &#x27;1&#x27;,</span><br><span class=\"line\">            score: 98</span><br><span class=\"line\">        &#125;, &#123;</span><br><span class=\"line\">            name: &#x27;傅恒&#x27;,</span><br><span class=\"line\">            subject: &#x27;2&#x27;,</span><br><span class=\"line\">            score: 99</span><br><span class=\"line\">        &#125;, &#123;</span><br><span class=\"line\">            name: &#x27;明玉&#x27;,</span><br><span class=\"line\">            subject: &#x27;3&#x27;,</span><br><span class=\"line\">            score: 88</span><br><span class=\"line\">        &#125;, &#123;</span><br><span class=\"line\">            name: &#x27;大猪蹄子&#x27;,</span><br><span class=\"line\">            subject: &#x27;4&#x27;,</span><br><span class=\"line\">            score: 0</span><br><span class=\"line\">        &#125;];</span><br><span class=\"line\">      </span><br><span class=\"line\"></span><br><span class=\"line\">        var tbody = document.querySelector(&#x27;tbody&#x27;)</span><br><span class=\"line\">        for(var i = 0; i &lt; datas.length; i++)&#123;</span><br><span class=\"line\">            var tr = document.createElement(&#x27;tr&#x27;)</span><br><span class=\"line\">            tbody.appendChild(tr)</span><br><span class=\"line\"></span><br><span class=\"line\">            for(var key in datas[i])&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                var td = document.createElement(&#x27;td&#x27;)</span><br><span class=\"line\">                tr.appendChild(td)</span><br><span class=\"line\">                td.innerHTML = datas[i][key]</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            // 创建删除按钮</span><br><span class=\"line\">            var deleTd = document.createElement(&#x27;td&#x27;)</span><br><span class=\"line\">               deleTd.innerHTML = `&lt;a class = &#x27;del&#x27;&gt;删除&lt;/a&gt;`</span><br><span class=\"line\">               tr.appendChild(deleTd)</span><br><span class=\"line\">            //   创建上移按钮</span><br><span class=\"line\">            var upBtn = document.createElement(&#x27;td&#x27;)</span><br><span class=\"line\">            // 创建下移按钮</span><br><span class=\"line\">            var downBtn = document.createElement(&#x27;td&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">            upBtn.innerHTML = `&lt;a class = &#x27;up&#x27;&gt;上移&lt;/a&gt;`</span><br><span class=\"line\">            downBtn.innerHTML = `&lt;a class = &#x27;down&#x27;&gt;下移&lt;/a&gt;`</span><br><span class=\"line\">            tr.appendChild(upBtn)</span><br><span class=\"line\">            tr.appendChild(downBtn)</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    //   获取上移下移按钮</span><br><span class=\"line\">        var up = document.querySelectorAll(&#x27;.up&#x27;)</span><br><span class=\"line\">        var down = document.querySelectorAll(&#x27;.down&#x27;)</span><br><span class=\"line\">        // console.log(up,down);</span><br><span class=\"line\">        for(var i = 0; i &lt; up.length; i++)&#123;</span><br><span class=\"line\">            up[i].addEventListener(&#x27;click&#x27;,function()&#123;</span><br><span class=\"line\">                </span><br><span class=\"line\">                var a = this.parentNode.parentNode</span><br><span class=\"line\">                //  被选中的tr的第一个td的内容</span><br><span class=\"line\">                var tr_fr_td = a.children[0].innerHTML</span><br><span class=\"line\">                //  tbody的第一个td的内容</span><br><span class=\"line\">                var tbod_fr_td = tbody.children[0].children[0].innerHTML</span><br><span class=\"line\"></span><br><span class=\"line\">                if(tr_fr_td === tbod_fr_td )&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    alert(&#x27;无法向上了&#x27;)</span><br><span class=\"line\">                    return</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                tbody.insertBefore(a,a.previousElementSibling)</span><br><span class=\"line\">                </span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            down[i].addEventListener(&#x27;click&#x27;,function()&#123;</span><br><span class=\"line\">                </span><br><span class=\"line\">                var a = this.parentNode.parentNode</span><br><span class=\"line\">                //  被选中的tr的第一个td的内容</span><br><span class=\"line\">                var tr_fr_td = a.children[0].innerHTML</span><br><span class=\"line\">                //  tbody的第一个td的内容</span><br><span class=\"line\">                var tbod_fr_td = tbody.children[0].children[0].innerHTML</span><br><span class=\"line\"></span><br><span class=\"line\">                if(tr_fr_td === tbod_fr_td )&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    alert(&#x27;无法向下了&#x27;)</span><br><span class=\"line\">                    return</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">                tbody.insertBefore(a.nextElementSibling,a)</span><br><span class=\"line\"></span><br><span class=\"line\">                </span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        var deleBtn = document.querySelectorAll(&#x27;.del&#x27;)</span><br><span class=\"line\">        for(var i = 0; i &lt; deleBtn.length; i++)&#123;</span><br><span class=\"line\">            deleBtn[i].onclick = function()&#123;</span><br><span class=\"line\">                tbody.removeChild(this.parentNode.parentNode)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      </span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n","categories":["前端前期"],"tags":["Javascript初学","Js小案例"]},{"title":"原型链","url":"/2021/07/13/javascriptP/","content":"<p><img src=\"/./images/%E5%8E%9F%E5%9E%8B%E9%93%BE.png\">这是原型链的原理图</p>\n<h3 id=\"原型关键点\"><a href=\"#原型关键点\" class=\"headerlink\" title=\"原型关键点\"></a>原型关键点</h3><p>  1、所有的引用类型（数组、函数、对象）可以自由扩展属性（除null以外）。</p>\n<p>2、所有的引用类型都有一个’_ _ proto_ _’属性(也叫隐式原型，它是一个普通的对象)。</p>\n<p>3、所有的函数都有一个’prototype’属性(这也叫显式原型，它也是一个普通的对象)。</p>\n<p>4、所有引用类型，它的’_ _ proto_ _’属性指向它的构造函数的’prototype’属性。</p>\n<p>5、当试图得到一个对象的属性时，如果这个对象本身不存在这个属性，那么就会去它的’_ _ proto_ _’属性(也就是它的构造函数的’prototype’属性)中去寻找。</p>\n","categories":["前端前期"],"tags":["Js高级","概念类","Javascript初级"]},{"title":"原型链浅解(1)","url":"/2021/07/16/javascriptQ/","content":"<p><img src=\"/./images/%E5%8E%9F%E5%9E%8B%E9%93%BE.png\">这是原型链的原理图</p>\n<h3 id=\"原型关键点\"><a href=\"#原型关键点\" class=\"headerlink\" title=\"原型关键点\"></a>原型关键点</h3><p>  1、所有的引用类型（数组、函数、对象）可以自由扩展属性（除null以外）。</p>\n<p>2、所有的引用类型都有一个’_ _ proto_ _’属性(也叫隐式原型，它是一个普通的对象)。</p>\n<p>3、所有的函数都有一个’prototype’属性(这也叫显式原型，它也是一个普通的对象)。</p>\n<p>4、所有引用类型，它的’_ _ proto_ _’属性指向它的构造函数的’prototype’属性。</p>\n<p>5、当试图得到一个对象的属性时，如果这个对象本身不存在这个属性，那么就会去它的’_ _ proto_ _’属性(也就是它的构造函数的’prototype’属性)中去寻找。</p>\n<p>以上是我在网上查到的关键点，对于我的理解是，通过“_ _ proto _ <em>”储存方法对于计算机来说是非常友好的，多个实例对象可以从同一个原型对象中调用方法，节省了内存，也提高了性能，而在学习中我们需要知道，构造函数，原型对象，实例对象之间的的关系，以及互相调用的方法，比如我们在实例化对象的时候，通过new构造函数生成实例对象，之后我们又可以通过”</em>  _ _ proto _ _”通过在原型对象中存入方法让所有的实例对象都可以使用，在ES6中引入了类这个概念，本质就是将构造函数与原型对象更加明确地体现。</p>\n<h3 id=\"利用构造函数创建对象\"><a href=\"#利用构造函数创建对象\" class=\"headerlink\" title=\"利用构造函数创建对象\"></a>利用构造函数创建对象</h3><p>1.构造函数是一种特殊的函数，主要用来初始化对象，它与new一起使用，我们可以把对象中的一些公共的方法和属性抽取出来，然后封装到这个函数中。</p>\n<p>2.new的执行过程  1)  在内存中创建一个新对象</p>\n<p>​                                2) 将this指向这个新对象</p>\n<p>​                                3) 执行构造函数里的代码，为新对象添加属性和方法</p>\n<p>​                                4) 返回这个新对象  </p>\n<p>3.实例成员和静态成员：1.实例成员是构造函数通过this添加的成员，只能通过实例化对象来访问</p>\n<p>​                                          2.静态成员是在构造函数本身上添加的成员，只能通过构造函数来访问</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// 构造函数中的属性和方法我们称为成员 成员可以添加</span><br><span class=\"line\">   function Star(uname, age)&#123;</span><br><span class=\"line\">       this.uname = uname</span><br><span class=\"line\">       this.age = age</span><br><span class=\"line\">       this.sing = function() &#123;</span><br><span class=\"line\">           console.log(&#x27;I can sing&#x27;);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   let a = new Star(&#x27;毛不易&#x27;, 20)</span><br><span class=\"line\">   // 1. 实例成员就是构造函数内部通过this添加的成员 uname age sing 就是实例成员</span><br><span class=\"line\">   // 实例成员只能通过实例化的对象来访问</span><br><span class=\"line\">   console.log(a.uname) //毛不易</span><br><span class=\"line\">   a.sing() //I can sing</span><br><span class=\"line\"></span><br><span class=\"line\">   // console.log(Star.uname) //undefined  不可以通过构造函数来访问实例成员</span><br><span class=\"line\"></span><br><span class=\"line\">   // 2.静态成员 在构造函数本身上添加的成员 sex 就是静态成员</span><br><span class=\"line\">   Star.sex = &#x27;男&#x27;</span><br><span class=\"line\">   // 静态成员只能通过构造函数来访问</span><br><span class=\"line\">   console.log(Star.sex) //男</span><br><span class=\"line\">   // console.log(a.sex) //undefined 不能通过对象来访问</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n","categories":["前端前期"],"tags":["Js高级","概念类"]},{"title":"创建类和对象","url":"/2021/07/16/javascriptR/","content":"<p> 创建一个类</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">class Star &#123;</span><br><span class=\"line\">    constructor(uname, age) &#123;</span><br><span class=\"line\">        this.uname = uname;</span><br><span class=\"line\">        this.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> 通过new关键字来创建实例对象</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">var ldh = new Star(&#x27;刘德华&#x27;, 18);</span><br><span class=\"line\">       var zxy = new Star(&#x27;张学友&#x27;, 20);</span><br><span class=\"line\">       console.log(ldh);  //&#123;uname:&#x27;刘德华&#x27;,age:18&#125;</span><br><span class=\"line\">       console.log(zxy);  //&#123;uname:&#x27;张学友&#x27;,age:20&#125;</span><br></pre></td></tr></table></figure>\n\n<p>创建过程可以总结为:</p>\n<p>​      (1) 通过class 关键字创建类, 类名我们还是习惯性定义首字母大写</p>\n<p>​    (2) 类里面有个constructor 函数,可以接受传递过来的参数,同时返回实例对象</p>\n<p>​    (3) constructor 函数 只要 new 生成实例时,就会自动调用这个函数, 如果我们不写这个函数,类也会自动生成这个函数</p>\n<p>​    (4) 生成实例 new 不能省略</p>\n<p>​    (5) 最后注意语法规范, 创建类 类名后面不要加小括号,生成实例 类名后面加小括号, 构造函数不需要加function</p>\n","categories":["前端前期"],"tags":["Js高级","原型链","概念类","类"]},{"title":"类中添加方法与继承","url":"/2021/07/16/javascriptS/","content":"<h3 id=\"添加方法\"><a href=\"#添加方法\" class=\"headerlink\" title=\"添加方法\"></a>添加方法</h3><h6 id=\"第一步-创建一个类，并在类中添加一个sing-的方法\"><a href=\"#第一步-创建一个类，并在类中添加一个sing-的方法\" class=\"headerlink\" title=\"第一步 创建一个类，并在类中添加一个sing()的方法\"></a>第一步 创建一个类，并在类中添加一个sing()的方法</h6><pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">class Star &#123;</span><br><span class=\"line\">    constructor(uname, age) &#123;</span><br><span class=\"line\">        this.uname = uname;</span><br><span class=\"line\">        this.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sing(song) &#123;</span><br><span class=\"line\">        console.log(this.uname + song);</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<h6 id=\"第二部-通过对类new出实例对象\"><a href=\"#第二部-通过对类new出实例对象\" class=\"headerlink\" title=\"第二部 通过对类new出实例对象\"></a>第二部 通过对类new出实例对象</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">var ldh = new Star(&#x27;刘德华&#x27;, 18);</span><br><span class=\"line\">var zxy = new Star(&#x27;张学友&#x27;, 20);</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"第三部-实例对象成功使用类中的公共方法\"><a href=\"#第三部-实例对象成功使用类中的公共方法\" class=\"headerlink\" title=\"第三部 实例对象成功使用类中的公共方法\"></a>第三部 实例对象成功使用类中的公共方法</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ldh.sing(&#x27;冰雨&#x27;);</span><br><span class=\"line\">zxy.sing(&#x27;李香兰&#x27;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h4><h5 id=\"1-注意构造函数中形参一定要使用this使构造函数中的形参指向传入的实参\"><a href=\"#1-注意构造函数中形参一定要使用this使构造函数中的形参指向传入的实参\" class=\"headerlink\" title=\"1.注意构造函数中形参一定要使用this使构造函数中的形参指向传入的实参\"></a>1.注意构造函数中形参一定要使用this使构造函数中的形参指向传入的实参</h5><h5 id=\"2-在勒种创建的方法不需要写function\"><a href=\"#2-在勒种创建的方法不需要写function\" class=\"headerlink\" title=\"2.在勒种创建的方法不需要写function\"></a>2.在勒种创建的方法不需要写function</h5><h5 id=\"3-多个方法之间不需要添加逗号分隔\"><a href=\"#3-多个方法之间不需要添加逗号分隔\" class=\"headerlink\" title=\"3.多个方法之间不需要添加逗号分隔\"></a>3.多个方法之间不需要添加逗号分隔</h5><h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><p>​      在ES6中添加了新的方法 extends使继承变得简单，我们可以直接使用extends 让方法和属性统统继承过来</p>\n<h6 id=\"首先创建一个要被继承的类\"><a href=\"#首先创建一个要被继承的类\" class=\"headerlink\" title=\"首先创建一个要被继承的类\"></a>首先创建一个要被继承的类</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"> class Father &#123;</span><br><span class=\"line\">    constructor(x, y) &#123;</span><br><span class=\"line\">        this.x = x;</span><br><span class=\"line\">        this.y = y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sum() &#123;</span><br><span class=\"line\">        console.log(this.x + this.y);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"再创建一个需要继承的类，在类名的后面添加extends-与-被继承类的类名，在类的构造函数内需要使用super方法，目的是将被继承类中的形参指向继承类中的形参\"><a href=\"#再创建一个需要继承的类，在类名的后面添加extends-与-被继承类的类名，在类的构造函数内需要使用super方法，目的是将被继承类中的形参指向继承类中的形参\" class=\"headerlink\" title=\"再创建一个需要继承的类，在类名的后面添加extends 与 被继承类的类名，在类的构造函数内需要使用super方法，目的是将被继承类中的形参指向继承类中的形参\"></a>再创建一个需要继承的类，在类名的后面添加extends 与 被继承类的类名，在类的构造函数内需要使用super方法，目的是将被继承类中的形参指向继承类中的形参</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">class Son extends Father &#123;</span><br><span class=\"line\">           constructor(x, y) &#123;</span><br><span class=\"line\">               super(x, y); //调用了父类中的构造函数</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"再创建两个实例对象，使用其中的方法，可以看待结果\"><a href=\"#再创建两个实例对象，使用其中的方法，可以看待结果\" class=\"headerlink\" title=\"再创建两个实例对象，使用其中的方法，可以看待结果\"></a>再创建两个实例对象，使用其中的方法，可以看待结果</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">var son = new Son(1, 2);</span><br><span class=\"line\">       var son1 = new Son(11, 22);</span><br><span class=\"line\">       son.sum(); //3</span><br><span class=\"line\">       son1.sum(); //33</span><br></pre></td></tr></table></figure>\n\n\n\n","categories":["前端学习中期"],"tags":["Js高级","原型链","概念类","构造函数"]},{"title":"super关键字与类使用时的注意事项","url":"/2021/07/16/javascriptT/","content":"<h3 id=\"使用Super调用父类中的方法\"><a href=\"#使用Super调用父类中的方法\" class=\"headerlink\" title=\"使用Super调用父类中的方法\"></a>使用Super调用父类中的方法</h3><h6 id=\"首先要创建父类和子类\"><a href=\"#首先要创建父类和子类\" class=\"headerlink\" title=\"首先要创建父类和子类\"></a>首先要创建父类和子类</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">class Father &#123;</span><br><span class=\"line\">           say() &#123;</span><br><span class=\"line\">               return &#x27;我是爸爸&#x27;;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       class Son extends Father &#123;</span><br><span class=\"line\">         </span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"在子类中写入继承-super-父类say\"><a href=\"#在子类中写入继承-super-父类say\" class=\"headerlink\" title=\"在子类中写入继承(super)父类say()\"></a>在子类中写入继承(super)父类say()</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">class Son extends Father &#123;   </span><br><span class=\"line\"></span><br><span class=\"line\">     super.say() //就是调用父类中的普通函数 say()</span><br><span class=\"line\">        </span><br><span class=\"line\">     &#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"实现了子类调用父类的方法，还有一个问题，当子类与父类都存在同一个方法时，在调用子类方法时会不会调用到父类中的方法\"><a href=\"#实现了子类调用父类的方法，还有一个问题，当子类与父类都存在同一个方法时，在调用子类方法时会不会调用到父类中的方法\" class=\"headerlink\" title=\"实现了子类调用父类的方法，还有一个问题，当子类与父类都存在同一个方法时，在调用子类方法时会不会调用到父类中的方法\"></a>实现了子类调用父类的方法，还有一个问题，当子类与父类都存在同一个方法时，在调用子类方法时会不会调用到父类中的方法</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">class Father &#123;</span><br><span class=\"line\">          say() &#123;</span><br><span class=\"line\">              return &#x27;我是爸爸&#x27;;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      class Son extends Father &#123;</span><br><span class=\"line\">          say() &#123;</span><br><span class=\"line\">              // console.log(&#x27;我是儿子&#x27;);</span><br><span class=\"line\">              console.log(super.say() + &#x27;的儿子&#x27;);</span><br><span class=\"line\">              // super.say() 就是调用父类中的普通函数 say()</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      var son = new Son();</span><br><span class=\"line\">      son.say();</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"结果输出-‘我是爸爸的儿子’，证明\"><a href=\"#结果输出-‘我是爸爸的儿子’，证明\" class=\"headerlink\" title=\"结果输出 ‘我是爸爸的儿子’，证明:\"></a>结果输出 ‘我是爸爸的儿子’，证明:</h6><p>​                 1. 继承中,如果实例化子类输出一个方法,先看子类有没有这个方法,如果有就先执行子类的</p>\n<p>​                 2. 继承中,如果子类里面没有,就去查找父类有没有这个方法,如果有,就执行父类的这个方法(就近原则)</p>\n<h3 id=\"类使用时的注意事项\"><a href=\"#类使用时的注意事项\" class=\"headerlink\" title=\"类使用时的注意事项\"></a>类使用时的注意事项</h3><h6 id=\"先创建一个类-在其中添加方法，并在方法中使用this\"><a href=\"#先创建一个类-在其中添加方法，并在方法中使用this\" class=\"headerlink\" title=\"先创建一个类,在其中添加方法，并在方法中使用this\"></a>先创建一个类,在其中添加方法，并在方法中使用this</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">       var that;</span><br><span class=\"line\">       var _that;</span><br><span class=\"line\"></span><br><span class=\"line\">class Star &#123;</span><br><span class=\"line\">           constructor(uname, age) &#123;</span><br><span class=\"line\">      </span><br><span class=\"line\">               that = this;</span><br><span class=\"line\">               console.log(this);</span><br><span class=\"line\"></span><br><span class=\"line\">               this.uname = uname;</span><br><span class=\"line\">               this.age = age;</span><br><span class=\"line\">               // this.sing();</span><br><span class=\"line\">               this.btn = document.querySelector(&#x27;button&#x27;);</span><br><span class=\"line\">               this.btn.onclick = this.sing;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           sing() &#123;</span><br><span class=\"line\">           </span><br><span class=\"line\">               console.log(this);</span><br><span class=\"line\"></span><br><span class=\"line\">               console.log(that.uname); </span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           dance() &#123;</span><br><span class=\"line\">             </span><br><span class=\"line\">               _that = this;</span><br><span class=\"line\">               console.log(this);</span><br><span class=\"line\"></span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"实例化对象输出实例化对象结果\"><a href=\"#实例化对象输出实例化对象结果\" class=\"headerlink\" title=\"实例化对象输出实例化对象结果\"></a>实例化对象输出实例化对象结果</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">var ldh = new Star(&#x27;刘德华&#x27;);</span><br><span class=\"line\">console.log(that === ldh);</span><br><span class=\"line\">ldh.dance();</span><br><span class=\"line\">console.log(_that === ldh);</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"可以发现\"><a href=\"#可以发现\" class=\"headerlink\" title=\"可以发现:\"></a>可以发现:</h6><p>​        1. 在 ES6 中类没有变量提升，所以必须先定义类，才能通过类实例化对象</p>\n<p>​        2. 类里面的共有的属性和方法一定要加this使用.</p>\n","categories":["前端学习中期"],"tags":["Js高级","原型链","概念类","构造函数"]},{"title":"super关键字与类使用时的注意事项","url":"/2021/07/16/zongjie/","content":"<h3 id=\"使用Super调用父类中的方法\"><a href=\"#使用Super调用父类中的方法\" class=\"headerlink\" title=\"使用Super调用父类中的方法\"></a>使用Super调用父类中的方法</h3><h6 id=\"首先要创建父类和子类\"><a href=\"#首先要创建父类和子类\" class=\"headerlink\" title=\"首先要创建父类和子类\"></a>首先要创建父类和子类</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">class Father &#123;</span><br><span class=\"line\">           say() &#123;</span><br><span class=\"line\">               return &#x27;我是爸爸&#x27;;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       class Son extends Father &#123;</span><br><span class=\"line\">         </span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"在子类中写入继承-super-父类say\"><a href=\"#在子类中写入继承-super-父类say\" class=\"headerlink\" title=\"在子类中写入继承(super)父类say()\"></a>在子类中写入继承(super)父类say()</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">class Son extends Father &#123;   </span><br><span class=\"line\"></span><br><span class=\"line\">     super.say() //就是调用父类中的普通函数 say()</span><br><span class=\"line\">        </span><br><span class=\"line\">     &#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"实现了子类调用父类的方法，还有一个问题，当子类与父类都存在同一个方法时，在调用子类方法时会不会调用到父类中的方法\"><a href=\"#实现了子类调用父类的方法，还有一个问题，当子类与父类都存在同一个方法时，在调用子类方法时会不会调用到父类中的方法\" class=\"headerlink\" title=\"实现了子类调用父类的方法，还有一个问题，当子类与父类都存在同一个方法时，在调用子类方法时会不会调用到父类中的方法\"></a>实现了子类调用父类的方法，还有一个问题，当子类与父类都存在同一个方法时，在调用子类方法时会不会调用到父类中的方法</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">class Father &#123;</span><br><span class=\"line\">          say() &#123;</span><br><span class=\"line\">              return &#x27;我是爸爸&#x27;;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      class Son extends Father &#123;</span><br><span class=\"line\">          say() &#123;</span><br><span class=\"line\">              // console.log(&#x27;我是儿子&#x27;);</span><br><span class=\"line\">              console.log(super.say() + &#x27;的儿子&#x27;);</span><br><span class=\"line\">              // super.say() 就是调用父类中的普通函数 say()</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      var son = new Son();</span><br><span class=\"line\">      son.say();</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"结果输出-‘我是爸爸的儿子’，证明\"><a href=\"#结果输出-‘我是爸爸的儿子’，证明\" class=\"headerlink\" title=\"结果输出 ‘我是爸爸的儿子’，证明:\"></a>结果输出 ‘我是爸爸的儿子’，证明:</h6><p>​                 1. 继承中,如果实例化子类输出一个方法,先看子类有没有这个方法,如果有就先执行子类的</p>\n<p>​                 2. 继承中,如果子类里面没有,就去查找父类有没有这个方法,如果有,就执行父类的这个方法(就近原则)</p>\n<h3 id=\"类使用时的注意事项\"><a href=\"#类使用时的注意事项\" class=\"headerlink\" title=\"类使用时的注意事项\"></a>类使用时的注意事项</h3><h6 id=\"先创建一个类-在其中添加方法，并在方法中使用this\"><a href=\"#先创建一个类-在其中添加方法，并在方法中使用this\" class=\"headerlink\" title=\"先创建一个类,在其中添加方法，并在方法中使用this\"></a>先创建一个类,在其中添加方法，并在方法中使用this</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">       var that;</span><br><span class=\"line\">       var _that;</span><br><span class=\"line\"></span><br><span class=\"line\">class Star &#123;</span><br><span class=\"line\">           constructor(uname, age) &#123;</span><br><span class=\"line\">      </span><br><span class=\"line\">               that = this;</span><br><span class=\"line\">               console.log(this);</span><br><span class=\"line\"></span><br><span class=\"line\">               this.uname = uname;</span><br><span class=\"line\">               this.age = age;</span><br><span class=\"line\">               // this.sing();</span><br><span class=\"line\">               this.btn = document.querySelector(&#x27;button&#x27;);</span><br><span class=\"line\">               this.btn.onclick = this.sing;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           sing() &#123;</span><br><span class=\"line\">           </span><br><span class=\"line\">               console.log(this);</span><br><span class=\"line\"></span><br><span class=\"line\">               console.log(that.uname); </span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           dance() &#123;</span><br><span class=\"line\">             </span><br><span class=\"line\">               _that = this;</span><br><span class=\"line\">               console.log(this);</span><br><span class=\"line\"></span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"实例化对象输出实例化对象结果\"><a href=\"#实例化对象输出实例化对象结果\" class=\"headerlink\" title=\"实例化对象输出实例化对象结果\"></a>实例化对象输出实例化对象结果</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">var ldh = new Star(&#x27;刘德华&#x27;);</span><br><span class=\"line\">console.log(that === ldh);</span><br><span class=\"line\">ldh.dance();</span><br><span class=\"line\">console.log(_that === ldh);</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"可以发现\"><a href=\"#可以发现\" class=\"headerlink\" title=\"可以发现:\"></a>可以发现:</h6><p>​        1. 在 ES6 中类没有变量提升，所以必须先定义类，才能通过类实例化对象</p>\n<p>​        2. 类里面的共有的属性和方法一定要加this使用.</p>\n","categories":["前端学习中期"],"tags":["Js高级","原型链","概念类","构造函数"]}]